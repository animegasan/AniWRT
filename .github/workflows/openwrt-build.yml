name: Build AniWRT

on:
  workflow_dispatch:
    inputs:
      resources:
        description: 'Select resources'
        required: true
        default: 'openwrt:23.05.4'
        type: choice
        options:
          - 'openwrt:23.05.4'
          - 'immortalwrt:23.05.3'
      device_board:
        description: 'Select device board'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'B860H'
          - 'HG680P'
      kernel_version:
        description: 'Select kernel version'
        required: true
        default: '5.15'
        type: string
      rootfs_partsize:
        description: 'Set ROOTFS_PARTSIZE (MB)'
        required: true
        default: '256'
        type: string
      enable_mod_sdcard:
        description: 'Enable mod-boot-sdcard (select true or false)'
        required: true
        default: 'false'
        type: boolean

jobs:
  Build_AniWRT:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Parse system and version
      id: parse_system_version
      run: |
        system=$(echo "${{ github.event.inputs.resources }}" | cut -d':' -f1)
        version=$(echo "${{ github.event.inputs.resources }}" | cut -d':' -f2)
        echo "system=$system" >> $GITHUB_ENV
        echo "version=$version" >> $GITHUB_ENV

    - name: Set up Image Builder environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libncurses5-dev gawk git subversion libssl-dev gettext unzip zlib1g-dev file wget
        if [ "${{ env.system }}" = "openwrt" ]; then
          wget https://downloads.openwrt.org/releases/${{ env.version }}/targets/armsr/armv8/openwrt-imagebuilder-${{ env.version }}-armsr-armv8.Linux-x86_64.tar.xz
          tar -xf openwrt-imagebuilder-${{ env.version }}-armsr-armv8.Linux-x86_64.tar.xz
        else
          wget https://downloads.immortalwrt.org/releases/${{ env.version }}/targets/armsr/armv8/immortalwrt-imagebuilder-${{ env.version }}-armsr-armv8.Linux-x86_64.tar.xz
          tar -xf immortalwrt-imagebuilder-${{ env.version }}-armsr-armv8.Linux-x86_64.tar.xz
        fi

    - name: Optionally clone mod-boot-sdcard repository
      if: ${{ github.event.inputs.enable_mod_sdcard }}
      run: |
        git clone https://github.com/msidiq22/mod-boot-sdcard
        if [ "${{ env.system }}" = "openwrt" ]; then
          mkdir -p openwrt-imagebuilder-${{ env.version }}-armsr-armv8.Linux-x86_64/files/boot
          cp -r mod-boot-sdcard/* openwrt-imagebuilder-${{ env.version }}-armsr-armv8.Linux-x86_64/files/boot/
        else
          mkdir -p immortalwrt-imagebuilder-${{ env.version }}-armsr-armv8.Linux-x86_64/files/boot
          cp -r mod-boot-sdcard/* immortalwrt-imagebuilder-${{ env.version }}-armsr-armv8.Linux-x86_64/files/boot/
        fi

    - name: Build Image
      run: |
        if [ "${{ env.system }}" = "openwrt" ]; then
          cd openwrt-imagebuilder-${{ env.version }}-armsr-armv8.Linux-x86_64
        else
          cd immortalwrt-imagebuilder-${{ env.version }}-armsr-armv8.Linux-x86_64
        fi
        make image PROFILE=generic PACKAGES="luci luci-compat luci-lib-ipkg luci-lib-ip wireless-tools wpa-cli wpa-supplicant wireless-regdb libiwinfo libiwinfo-lua libiwinfo-data kmod-ath kmod-ath9k kmod-ath9k-common kmod-ath9k-htc kmod-cfg80211 kmod-crypto-acompress kmod-crypto-crc32c kmod-crypto-hash kmod-fs-btrfs kmod-mac80211 kmod-brcmutil kmod-brcmfmac kmod-usb2 ath9k-htc-firmware hostapd hostapd-utils btrfs-progs" FILES="files/" ROOTFS_PARTSIZE=${{ github.event.inputs.rootfs_partsize }}

    - name: Get Image Filename
      id: get_image_filename
      run: |
        if [ "${{ env.system }}" = "openwrt" ]; then
          cd openwrt-imagebuilder-${{ env.version }}-armsr-armv8.Linux-x86_64/bin/targets/armsr/armv8
        else
          cd immortalwrt-imagebuilder-${{ env.version }}-armsr-armv8.Linux-x86_64/bin/targets/armsr/armv8
        fi
        IMAGE_FILE=$(ls *.img.gz)
        echo "IMAGE_FILE=$IMAGE_FILE" >> $GITHUB_ENV
        echo "Image file: $IMAGE_FILE"

    - name: Debug Image File Path
      run: |
        echo "Image file path: ${{ env.IMAGE_FILE }}"

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: ${{ env.system }} Image Build ${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload release to GitHub
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.system }}-imagebuilder-${{ env.version }}/bin/targets/armsr/armv8/${{ env.IMAGE_FILE }}
        asset_name: ${{ env.IMAGE_FILE }}
        asset_content_type: application/gzip
